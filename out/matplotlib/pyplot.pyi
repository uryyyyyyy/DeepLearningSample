# Stubs for matplotlib.pyplot (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

new_figure_manager = ...  # type: Any
draw_if_interactive = ...  # type: Any

def install_repl_displayhook(): ...
def uninstall_repl_displayhook(): ...

draw_all = ...  # type: Any

def findobj(o: Optional[Any] = ..., match: Optional[Any] = ..., include_self: bool = ...): ...
def switch_backend(newbackend): ...
def show(*args, **kw): ...
def isinteractive(): ...
def ioff(): ...
def ion(): ...
def pause(interval): ...
def rc(*args, **kwargs): ...
def rc_context(rc: Optional[Any] = ..., fname: Optional[Any] = ...): ...
def rcdefaults(): ...
def gci(): ...
def sci(im): ...
def setp(*args, **kwargs): ...
def xkcd(scale: int = ..., length: int = ..., randomness: int = ...): ...
def figure(num: Optional[Any] = ..., figsize: Optional[Any] = ..., dpi: Optional[Any] = ..., facecolor: Optional[Any] = ..., edgecolor: Optional[Any] = ..., frameon: bool = ..., FigureClass: Any = ..., **kwargs): ...
def gcf(): ...
def fignum_exists(num): ...
def get_fignums(): ...
def get_figlabels(): ...
def get_current_fig_manager(): ...
def connect(s, func): ...
def disconnect(cid): ...
def close(*args): ...
def clf(): ...
def draw(): ...
def savefig(*args, **kwargs): ...
def ginput(*args, **kwargs): ...
def waitforbuttonpress(*args, **kwargs): ...
def figtext(*args, **kwargs): ...
def suptitle(*args, **kwargs): ...
def figimage(*args, **kwargs): ...
def figlegend(handles, labels, loc, **kwargs): ...
def hold(b: Optional[Any] = ...): ...
def ishold(): ...
def over(func, *args, **kwargs): ...
def axes(*args, **kwargs): ...
def delaxes(*args): ...
def sca(ax): ...
def gca(**kwargs): ...
def subplot(*args, **kwargs): ...
def subplots(nrows: int = ..., ncols: int = ..., sharex: bool = ..., sharey: bool = ..., squeeze: bool = ..., subplot_kw: Optional[Any] = ..., gridspec_kw: Optional[Any] = ..., **fig_kw): ...
def subplot2grid(shape, loc, rowspan: int = ..., colspan: int = ..., **kwargs): ...
def twinx(ax: Optional[Any] = ...): ...
def twiny(ax: Optional[Any] = ...): ...
def subplots_adjust(*args, **kwargs): ...
def subplot_tool(targetfig: Optional[Any] = ...): ...
def tight_layout(pad: float = ..., h_pad: Optional[Any] = ..., w_pad: Optional[Any] = ..., rect: Optional[Any] = ...): ...
def box(on: Optional[Any] = ...): ...
def title(s, *args, **kwargs): ...
def axis(*v, **kwargs): ...
def xlabel(s, *args, **kwargs): ...
def ylabel(s, *args, **kwargs): ...
def xlim(*args, **kwargs): ...
def ylim(*args, **kwargs): ...
def xscale(*args, **kwargs): ...
def yscale(*args, **kwargs): ...
def xticks(*args, **kwargs): ...
def yticks(*args, **kwargs): ...
def minorticks_on(): ...
def minorticks_off(): ...
def rgrids(*args, **kwargs): ...
def thetagrids(*args, **kwargs): ...
def plotting(): ...
def get_plot_commands(): ...
def colors(): ...
def colormaps(): ...
def colorbar(mappable: Optional[Any] = ..., cax: Optional[Any] = ..., ax: Optional[Any] = ..., **kw): ...
def clim(vmin: Optional[Any] = ..., vmax: Optional[Any] = ...): ...
def set_cmap(cmap): ...
def imread(*args, **kwargs): ...
def imsave(*args, **kwargs): ...
def matshow(A, fignum: Optional[Any] = ..., **kw): ...
def polar(*args, **kwargs): ...
def plotfile(fname, cols: Any = ..., plotfuncs: Optional[Any] = ..., comments: str = ..., skiprows: int = ..., checkrows: int = ..., delimiter: str = ..., names: Optional[Any] = ..., subplots: bool = ..., newfig: bool = ..., **kwargs): ...
def spy(Z, precision: int = ..., marker: Optional[Any] = ..., markersize: Optional[Any] = ..., aspect: str = ..., hold: Optional[Any] = ..., **kwargs): ...
def acorr(x, hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def angle_spectrum(x, Fs: Optional[Any] = ..., Fc: Optional[Any] = ..., window: Optional[Any] = ..., pad_to: Optional[Any] = ..., sides: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def arrow(x, y, dx, dy, hold: Optional[Any] = ..., **kwargs): ...
def axhline(y: int = ..., xmin: int = ..., xmax: int = ..., hold: Optional[Any] = ..., **kwargs): ...
def axhspan(ymin, ymax, xmin: int = ..., xmax: int = ..., hold: Optional[Any] = ..., **kwargs): ...
def axvline(x: int = ..., ymin: int = ..., ymax: int = ..., hold: Optional[Any] = ..., **kwargs): ...
def axvspan(xmin, xmax, ymin: int = ..., ymax: int = ..., hold: Optional[Any] = ..., **kwargs): ...
def bar(left, height, width: float = ..., bottom: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def barh(bottom, width, height: float = ..., left: Optional[Any] = ..., hold: Optional[Any] = ..., **kwargs): ...
def broken_barh(xranges, yrange, hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def boxplot(x, notch: Optional[Any] = ..., sym: Optional[Any] = ..., vert: Optional[Any] = ..., whis: Optional[Any] = ..., positions: Optional[Any] = ..., widths: Optional[Any] = ..., patch_artist: Optional[Any] = ..., bootstrap: Optional[Any] = ..., usermedians: Optional[Any] = ..., conf_intervals: Optional[Any] = ..., meanline: Optional[Any] = ..., showmeans: Optional[Any] = ..., showcaps: Optional[Any] = ..., showbox: Optional[Any] = ..., showfliers: Optional[Any] = ..., boxprops: Optional[Any] = ..., labels: Optional[Any] = ..., flierprops: Optional[Any] = ..., medianprops: Optional[Any] = ..., meanprops: Optional[Any] = ..., capprops: Optional[Any] = ..., whiskerprops: Optional[Any] = ..., manage_xticks: bool = ..., hold: Optional[Any] = ..., data: Optional[Any] = ...): ...
def cohere(x, y, NFFT: int = ..., Fs: int = ..., Fc: int = ..., detrend: Any = ..., window: Any = ..., noverlap: int = ..., pad_to: Optional[Any] = ..., sides: str = ..., scale_by_freq: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def clabel(CS, *args, **kwargs): ...
def contour(*args, **kwargs): ...
def contourf(*args, **kwargs): ...
def csd(x, y, NFFT: Optional[Any] = ..., Fs: Optional[Any] = ..., Fc: Optional[Any] = ..., detrend: Optional[Any] = ..., window: Optional[Any] = ..., noverlap: Optional[Any] = ..., pad_to: Optional[Any] = ..., sides: Optional[Any] = ..., scale_by_freq: Optional[Any] = ..., return_line: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def errorbar(x, y, yerr: Optional[Any] = ..., xerr: Optional[Any] = ..., fmt: str = ..., ecolor: Optional[Any] = ..., elinewidth: Optional[Any] = ..., capsize: Optional[Any] = ..., barsabove: bool = ..., lolims: bool = ..., uplims: bool = ..., xlolims: bool = ..., xuplims: bool = ..., errorevery: int = ..., capthick: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def eventplot(positions, orientation: str = ..., lineoffsets: int = ..., linelengths: int = ..., linewidths: Optional[Any] = ..., colors: Optional[Any] = ..., linestyles: str = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def fill(*args, **kwargs): ...
def fill_between(x, y1, y2: int = ..., where: Optional[Any] = ..., interpolate: bool = ..., step: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def fill_betweenx(y, x1, x2: int = ..., where: Optional[Any] = ..., step: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def hexbin(x, y, C: Optional[Any] = ..., gridsize: int = ..., bins: Optional[Any] = ..., xscale: str = ..., yscale: str = ..., extent: Optional[Any] = ..., cmap: Optional[Any] = ..., norm: Optional[Any] = ..., vmin: Optional[Any] = ..., vmax: Optional[Any] = ..., alpha: Optional[Any] = ..., linewidths: Optional[Any] = ..., edgecolors: str = ..., reduce_C_function: Any = ..., mincnt: Optional[Any] = ..., marginals: bool = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def hist(x, bins: int = ..., range: Optional[Any] = ..., normed: bool = ..., weights: Optional[Any] = ..., cumulative: bool = ..., bottom: Optional[Any] = ..., histtype: str = ..., align: str = ..., orientation: str = ..., rwidth: Optional[Any] = ..., log: bool = ..., color: Optional[Any] = ..., label: Optional[Any] = ..., stacked: bool = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def hist2d(x, y, bins: int = ..., range: Optional[Any] = ..., normed: bool = ..., weights: Optional[Any] = ..., cmin: Optional[Any] = ..., cmax: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def hlines(y, xmin, xmax, colors: str = ..., linestyles: str = ..., label: str = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def imshow(X, cmap: Optional[Any] = ..., norm: Optional[Any] = ..., aspect: Optional[Any] = ..., interpolation: Optional[Any] = ..., alpha: Optional[Any] = ..., vmin: Optional[Any] = ..., vmax: Optional[Any] = ..., origin: Optional[Any] = ..., extent: Optional[Any] = ..., shape: Optional[Any] = ..., filternorm: int = ..., filterrad: float = ..., imlim: Optional[Any] = ..., resample: Optional[Any] = ..., url: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def loglog(*args, **kwargs): ...
def magnitude_spectrum(x, Fs: Optional[Any] = ..., Fc: Optional[Any] = ..., window: Optional[Any] = ..., pad_to: Optional[Any] = ..., sides: Optional[Any] = ..., scale: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def pcolor(*args, **kwargs): ...
def pcolormesh(*args, **kwargs): ...
def phase_spectrum(x, Fs: Optional[Any] = ..., Fc: Optional[Any] = ..., window: Optional[Any] = ..., pad_to: Optional[Any] = ..., sides: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def pie(x, explode: Optional[Any] = ..., labels: Optional[Any] = ..., colors: Optional[Any] = ..., autopct: Optional[Any] = ..., pctdistance: float = ..., shadow: bool = ..., labeldistance: float = ..., startangle: Optional[Any] = ..., radius: Optional[Any] = ..., counterclock: bool = ..., wedgeprops: Optional[Any] = ..., textprops: Optional[Any] = ..., center: Any = ..., frame: bool = ..., hold: Optional[Any] = ..., data: Optional[Any] = ...): ...
def plot(*args, **kwargs): ...
def plot_date(x, y, fmt: str = ..., tz: Optional[Any] = ..., xdate: bool = ..., ydate: bool = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def psd(x, NFFT: Optional[Any] = ..., Fs: Optional[Any] = ..., Fc: Optional[Any] = ..., detrend: Optional[Any] = ..., window: Optional[Any] = ..., noverlap: Optional[Any] = ..., pad_to: Optional[Any] = ..., sides: Optional[Any] = ..., scale_by_freq: Optional[Any] = ..., return_line: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def quiver(*args, **kw): ...
def quiverkey(*args, **kw): ...
def scatter(x, y, s: int = ..., c: Optional[Any] = ..., marker: str = ..., cmap: Optional[Any] = ..., norm: Optional[Any] = ..., vmin: Optional[Any] = ..., vmax: Optional[Any] = ..., alpha: Optional[Any] = ..., linewidths: Optional[Any] = ..., verts: Optional[Any] = ..., edgecolors: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def semilogx(*args, **kwargs): ...
def semilogy(*args, **kwargs): ...
def specgram(x, NFFT: Optional[Any] = ..., Fs: Optional[Any] = ..., Fc: Optional[Any] = ..., detrend: Optional[Any] = ..., window: Optional[Any] = ..., noverlap: Optional[Any] = ..., cmap: Optional[Any] = ..., xextent: Optional[Any] = ..., pad_to: Optional[Any] = ..., sides: Optional[Any] = ..., scale_by_freq: Optional[Any] = ..., mode: Optional[Any] = ..., scale: Optional[Any] = ..., vmin: Optional[Any] = ..., vmax: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def stackplot(x, *args, **kwargs): ...
def stem(*args, **kwargs): ...
def step(x, y, *args, **kwargs): ...
def streamplot(x, y, u, v, density: int = ..., linewidth: Optional[Any] = ..., color: Optional[Any] = ..., cmap: Optional[Any] = ..., norm: Optional[Any] = ..., arrowsize: int = ..., arrowstyle: str = ..., minlength: float = ..., transform: Optional[Any] = ..., zorder: int = ..., start_points: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ...): ...
def tricontour(*args, **kwargs): ...
def tricontourf(*args, **kwargs): ...
def tripcolor(*args, **kwargs): ...
def triplot(*args, **kwargs): ...
def violinplot(dataset, positions: Optional[Any] = ..., vert: bool = ..., widths: float = ..., showmeans: bool = ..., showextrema: bool = ..., showmedians: bool = ..., points: int = ..., bw_method: Optional[Any] = ..., hold: Optional[Any] = ..., data: Optional[Any] = ...): ...
def vlines(x, ymin, ymax, colors: str = ..., linestyles: str = ..., label: str = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def xcorr(x, y, normed: bool = ..., detrend: Any = ..., usevlines: bool = ..., maxlags: int = ..., hold: Optional[Any] = ..., data: Optional[Any] = ..., **kwargs): ...
def barbs(*args, **kw): ...
def cla(): ...
def grid(b: Optional[Any] = ..., which: str = ..., axis: str = ..., **kwargs): ...
def legend(*args, **kwargs): ...
def table(**kwargs): ...
def text(x, y, s, fontdict: Optional[Any] = ..., withdash: bool = ..., **kwargs): ...
def annotate(*args, **kwargs): ...
def ticklabel_format(**kwargs): ...
def locator_params(axis: str = ..., tight: Optional[Any] = ..., **kwargs): ...
def tick_params(axis: str = ..., **kwargs): ...
def margins(*args, **kw): ...
def autoscale(enable: bool = ..., axis: str = ..., tight: Optional[Any] = ...): ...
def autumn(): ...
def bone(): ...
def cool(): ...
def copper(): ...
def flag(): ...
def gray(): ...
def hot(): ...
def hsv(): ...
def jet(): ...
def pink(): ...
def prism(): ...
def spring(): ...
def summer(): ...
def winter(): ...
def spectral(): ...
def magma(): ...
def inferno(): ...
def plasma(): ...
def viridis(): ...
